@model Category // if you aren't passing anything inside controller params (like in Create), then you can use the model based on the data you are collecting on the page.

<form method="post" asp-action="Edit">  <!-- will post to same action post method (Edit) by default, or you can explicitly declare using asp-action tag -->
    <div class="border p-3 mt-4">
        <div class="row pb-2">
            <h2 class="text-primary">
                Edit Category
                <hr />
            </h2>
        </div>
    <div>
        @*<div asp-validation-summary="All"></div> <!-- this asp-validation tag spits out all of the error msgs->*@
        <div class="mb-3"> <!-- margin bottom 3-->
            <label asp-for="Name"></label> <!-- when you add asp-for in label, you can use/manipulate any properties from the model-->
            <input asp-for="Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span> <!--makes sure the field matches the model's requirements and gives error msg if not-->
        </div>
        <br />
        <div class="mb-3">
            <label asp-for="DisplayOrder"></label> 
            <input asp-for="DisplayOrder" class="form-control" />
            <span asp-validation-for="DisplayOrder" class="text-danger"></span> <!--client side validation-->

        </div>
        <button type="submit" class="btn btn-primary" style="width:150px">
            Update
        </button>
        <a asp-controller="Category" asp-action="Index" class="btn btn-secondary" style="width:150px"> <!-- link btn to go back to previous page of category list-->
            Back to List
        </a>
    </div>
</form>


<!--since _ValidationScriptsPartial.cshtml has scripts, we have to use this special identifier-->
@section Scripts 
{    
    @{
        <!-- name partial views starting with _-->
        <partial name="_ValidationScriptsPartial" /> <!--allows validations to be done client side so we don't unessecarily ping the server when we have errors-->
    }
}